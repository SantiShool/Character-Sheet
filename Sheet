#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <cmath> 
#include <limits> 
#include <algorithm> 

class DnDCharacter {
public:
    // Character basic info
    std::string name; // Character's name
    std::string characterClass; // Character's class
    std::string subclass; // Subclass, for more specialization
    std::map<std::string, int> halfElfChoices; // Bonus choices for half-elf race
    std::string race; // Character's race
    std::string subRace; // Subrace for further customization
    std::string background; // Background story
    // Starting ability scores, all set to 8 as a base
    std::map<std::string, int> abilityScores = {
        {"Strength", 8}, {"Dexterity", 8}, {"Constitution", 8},
        {"Intelligence", 8}, {"Wisdom", 8}, {"Charisma", 8}
    };
    int availablePoints = 27; // Points to distribute to ability scores

    // Race-based stat bonuses
    std::map<std::string, std::map<std::string, int>> racialBonuses = {
        {"Dragonborn", {{"Strength", 2}, {"Charisma", 1}}},
        {"Dwarf", {{"Constitution", 2}}},
        {"Elf", {{"Dexterity", 2}}},
        {"Halfling", {{"Dexterity", 2}}},
        {"Human", {{"Strength", 1}, {"Dexterity", 1}, {"Constitution", 1}, {"Intelligence", 1}, {"Wisdom", 1}, {"Charisma", 1}}},
        {"Half-Elf", {{"Charisma", 2}}},
        {"Half-Orc", {{"Strength", 2}, {"Constitution", 1}}},
        {"Tiefling", {{"Charisma", 2}, {"Intelligence", 1}}}
    };

    // Subrace-based stat bonuses
    std::map<std::string, std::map<std::string, int>> subraceBonuses = {
        {"Hill Dwarf", {{"Wisdom", 1}}},
        {"Hill Dwarf", {{"Wisdom", 1}}},
        {"Mountain Dwarf", {{"Strength", 2}}},
        {"High Elf", {{"Intelligence", 1}}},
        {"Wood Elf", {{"Wisdom", 1}}},
        {"Dark Elf (Drow)", {{"Charisma", 1}}},
        {"Lightfoot Halfling", {{"Charisma", 1}}},
        {"Stout Halfling", {{"Constitution", 1}}}
    };
    // Lists of races and classes for selection
    std::vector<std::string> races = {
        "Dwarf", "Elf", "Halfling", "Human", "Dragonborn",
        "Gnome", "Half-Elf", "Half-Orc", "Tiefling"
    };

    std::map<std::string, std::vector<std::string>> subRaces = {
        {"Dwarf", {"Hill Dwarf", "Mountain Dwarf"}},
        {"Elf", {"High Elf", "Wood Elf", "Dark Elf (Drow)"}},
        {"Halfling", {"Lightfoot Halfling", "Stout Halfling"}},
        {"Gnome", {"Forest Gnome", "Rock Gnome"}},
    };

    std::vector<std::string> classes = {
        "Barbarian", "Bard", "Cleric", "Druid", "Fighter",
        "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer",
        "Warlock", "Wizard"
    };

    std::map<std::string, std::vector<std::string>> subclasses = {
        {"Barbarian", {"Path of the Berserker", "Path of the Totem Warrior"}},
        {"Bard", {"College of Lore", "College of Valor"}},
        {"Cleric", {"Knowledge Domain", "Life Domain", "Light Domain", "Nature Domain", "Tempest Domain", "Trickery Domain", "War Domain"}},
        {"Druid", {"Circle of the Land", "Circle of the Moon"}},
        {"Fighter", {"Battle Master", "Champion", "Eldritch Knight"}},
        {"Monk", {"Way of Four Elements", "Way of the Open Hand", "Way of Shadow"}},
        {"Paladin", {"Oath of the Ancients", "Oath of Devotion", "Oath of Vengeance"}},
        {"Ranger", {"Beast Master", "Hunter"}},
        {"Rogue", {"Arcane Trickster", "Assassin", "Thief"}},
        {"Sorcerer", {"Draconic Bloodline", "Wild Magic"}},
        {"Warlock", {"The Archfey", "The Fiend", "The Great Old One"}},
        {"Wizard", {"School of Abjuration", "School of Conjuration", "School of Divination", "School of Enchantment", "School of Evocation", "School of Illusion", "School of Necromancy", "School of Transmutation"}},
    };

    std::vector<std::string> backgrounds = {
        "Acolyte", "Charlatan", "Criminal", "Entertainer", "Folk Hero",
        "Guild Artisan", "Hermit", "Noble", "Outlander", "Sage",
        "Sailor", "Soldier", "Urchin"
    };

    // Character stats beyond ability scores
    int speed; // Movement speed
    int initiative; // Determines turn order in combat
    int health; // Hit points

    // Speeds and hit dice by race and class for calculating stats
    static std::map<std::string, int> raceSpeeds;
    static std::map<std::string, int> classHitDice;

    // Constructor to sort races and classes for easier selection and set default stats
    DnDCharacter() {
        std::sort(races.begin(), races.end());
        std::sort(classes.begin(), classes.end());
        // Default values for stats
        speed = 30; 
        initiative = 0; 
        health = 10; 
    
    }

    // Function declarations (implementations to follow)
    void inputCharacterInfo();
    void applyRacialBonuses();
    void handleHalfElfBonuses();
    void selectFromList(const std::string& type, const std::vector<std::string>& options, std::string& selection);
    void inputAbilityScores();
    void finalizeCharacterStats();
    int calculateModifier(int score) const;
    int calculateCost(int currentScore, int pointsToAdd);
    void displayCharacterSheet() const;
};

// Static member initialization
std::map<std::string, int> DnDCharacter::raceSpeeds = {
    {"Dwarf", 25}, {"Elf", 30}, {"Halfling", 25}, {"Human", 30},
    {"Dragonborn", 30}, {"Gnome", 25}, {"Half-Elf", 30}, {"Half-Orc", 30}, {"Tiefling", 30}
};

std::map<std::string, int> DnDCharacter::classHitDice = {
    {"Barbarian", 12}, {"Bard", 8}, {"Cleric", 8}, {"Druid", 8}, {"Fighter", 10},
    {"Monk", 8}, {"Paladin", 10}, {"Ranger", 10}, {"Rogue", 8}, {"Sorcerer", 6},
    {"Warlock", 8}, {"Wizard", 6}
};

// Define inputCharacterInfo
void DnDCharacter::inputCharacterInfo() {
    // Name input
    std::cout << "Enter character name: ";
    std::getline(std::cin, name);

    // Race selection
    selectFromList("race", races, race);

    // Handle special case for Half-Elf
    if (race == "Half-Elf") {
        handleHalfElfBonuses();
    }

    // Subrace selection
    auto foundSubRaces = subRaces.find(race);
    if (foundSubRaces != subRaces.end()) {
        selectFromList("sub-race", foundSubRaces->second, subRace);
    }

    // Class selection
    selectFromList("class", classes, characterClass);

    // Subclass selection
    auto foundSubclasses = subclasses.find(characterClass);
    if (foundSubclasses != subclasses.end()) {
        selectFromList("subclass", foundSubclasses->second, subclass);
    }

    // Background selection
    selectFromList("background", backgrounds, background);

    applyRacialBonuses(); // Apply racial bonuses to ability scores
        inputAbilityScores(); // Input and allocate points to ability scores
    finalizeCharacterStats(); // Calculate final stats based on race, class, etc.
}

// Apply racial bonuses to the character's ability scores
void DnDCharacter::applyRacialBonuses() {
    auto bonuses = racialBonuses.find(race); // Find the race in the map
    if (bonuses != racialBonuses.end()) { // If found, apply bonuses
        for (const auto& bonus : bonuses->second) {
            abilityScores[bonus.first] += bonus.second;
        }
    }
}

// Handle special bonuses for Half-Elf race
void DnDCharacter::handleHalfElfBonuses() {
    // Specific logic for Half-Elf race bonuses
    std::cout << "As a Half-Elf, you receive +2 Charisma. You can also choose two other ability scores to increase by +1 each, other than Charisma.\n";
    int bonusesApplied = 0;
    while (bonusesApplied < 2) { // Allow selection of two additional bonuses
        std::cout << "Choose an ability score to increase by +1: ";
        std::string choice;
        std::getline(std::cin, choice);
        // Process and validate the choice
        if (choice == "Charisma") {
            std::cout << "Charisma cannot be chosen. Please choose a different ability score.\n";
            continue;
        }
        // Check for valid ability score and not already chosen
        if (abilityScores.find(choice) == abilityScores.end() || halfElfChoices.find(choice) != halfElfChoices.end()) {
            std::cout << "Invalid choice. Please select a valid ability score that hasn't been chosen yet.\n";
            continue;
        }
        halfElfChoices[choice] = 1; // Apply the chosen bonus
        bonusesApplied++;
    }
}

// Presents a list of options for the user to choose from
void DnDCharacter::selectFromList(const std::string& type, const std::vector<std::string>& options, std::string& selection) {
    // Present options to the user
    std::cout << "Select your character's " << type << ":\n";
    for (size_t i = 0; i < options.size(); ++i) {
        std::cout << i + 1 << ". " << options[i] << "\n";
    }
    // Handle user selection
    int choice;
    do {
        std::cout << "Enter the number of your choice: ";
        std::cin >> choice;
        // Validate input
        if (std::cin.fail() || choice < 1 || choice > options.size()) {
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cout << "Invalid choice, please select a number from the list.\n";
            continue;
        }
        break;
    } while (true);

    selection = options[choice - 1];
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Clear the input buffer
}

void DnDCharacter::inputAbilityScores() {
    std::cout << "\nYou have " << availablePoints << " points to allocate to your ability scores."
              << "\nNote: The maximum value for any ability score is 15, not including racial or subrace bonuses."
              << "\nAlso, increasing an ability score from 14 to 15 costs 2 points.\n";

    // Define the order in which stats are displayed and allocated
    std::vector<std::string> statOrder = {"Strength", "Dexterity", "Constitution", "Wisdom", "Intelligence", "Charisma"};

    // Temporary map for user-allocated points, separate from bonuses
    std::map<std::string, int> userAllocatedPoints = {
        {"Strength", 0}, {"Dexterity", 0}, {"Constitution", 0},
        {"Wisdom", 0}, {"Intelligence", 0}, {"Charisma", 0}
    };

    while (availablePoints > 0) {
        for (const auto& stat : statOrder) {
            int raceBonus = racialBonuses[race][stat] + subraceBonuses[subRace][stat] + halfElfChoices[stat];
            std::cout << stat << ": " << (8 + userAllocatedPoints[stat])
                      << " (" << (raceBonus > 0 ? "+" + std::to_string(raceBonus) : "0") << " bonus)\n";
        }

        std::string choice;
        std::cout << "\nAvailable points: " << availablePoints << ". Enter an ability to increase or type 'done' to finish: ";
        std::getline(std::cin, choice);
        if (choice == "done") break;

        if (userAllocatedPoints.find(choice) == userAllocatedPoints.end()) {
            std::cout << "Invalid ability. Please try again.\n";
            continue;
        }

        std::cout << "Points to add to " << choice << " (0 to cancel): ";
        int pointsToAdd;
        std::cin >> pointsToAdd;
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

        if (pointsToAdd == 0) continue;

        int currentAllocated = userAllocatedPoints[choice];
        int cost = calculateCost(8 + currentAllocated, pointsToAdd);

        if (cost <= availablePoints && (8 + currentAllocated + pointsToAdd) <= 15) {
            userAllocatedPoints[choice] += pointsToAdd;
            availablePoints -= cost;
            std::cout << choice << " increased. Points remaining: " << availablePoints << ".\n";
        } else {
            std::cout << "Not enough points or score limit reached. Remember, the max score before bonuses is 15.\n";
        }
    }

    // Apply the points allocated by the user to the base scores (starting at 8)
    for (const auto& [stat, points] : userAllocatedPoints) {
        abilityScores[stat] = 8 + points; // Starting each stat at 8, then adding allocated points
    }

    std::cout << "\nFinal Ability Scores after allocation and bonuses:\n";
    for (const auto& stat : statOrder) {
        int totalBonus = racialBonuses[race][stat] + subraceBonuses[subRace][stat] + halfElfChoices[stat];
        abilityScores[stat] += totalBonus; // Apply racial and subrace bonuses
        std::cout << stat << ": " << abilityScores[stat] << "\n";
    }

    std::cin.clear();
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}
void DnDCharacter::finalizeCharacterStats() {
    speed = raceSpeeds[race];
    initiative = calculateModifier(abilityScores["Dexterity"]);
    health = classHitDice[characterClass] + calculateModifier(abilityScores["Constitution"]);
}

int DnDCharacter::calculateModifier(int score) const {
    return std::floor((score - 10) / 2.0);
}

int DnDCharacter::calculateCost(int currentScore, int pointsToAdd) {
    int cost = 0;
    for (int i = 0; i < pointsToAdd; ++i) {
        if (currentScore + i >= 14) {
            cost += 2; // Costs 2 points to increase from 14 to 15
        } else {
            cost += 1;
        }
    }
    return cost;
}

void DnDCharacter::displayCharacterSheet() const {
    std::cout << "\n--- Character Sheet ---\n";
    std::cout << "Name: " << name << "\nRace: " << race;
    if (!subRace.empty()) std::cout << " (" << subRace << ")";
    std::cout << "\nClass: " << characterClass;
    if (!subclass.empty()) std::cout << " (" << subclass << ")";
    std::cout << "\nBackground: " << background << "\n";
    std::cout << "--------------------------------\n";

    // Display HP, Initiative, and Speed
    std::cout << "HP: " << health << "\n";
    std::cout << "Initiative: " << (initiative >= 0 ? "+" : "") << initiative << "\n";
    std::cout << "Speed: " << speed << "\n";

    // Second Divider
    std::cout << "--------------------------------\n";

    // Display Ability Scores
    std::cout << "Ability Scores:\n";
    for (const auto& [key, value] : abilityScores) {
        std::cout << key << ": " << value << " (Modifier: " << calculateModifier(value) << ")\n";
    }
}

int main() {
    DnDCharacter character;
    character.inputCharacterInfo();
    character.finalizeCharacterStats(); // Ensure stats are finalized based on race/class/abilities
    character.displayCharacterSheet();
    return 0;
}
