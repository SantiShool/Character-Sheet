#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <cmath> // For std::floor
#include <limits>
#include <algorithm>

class DnDCharacter {
public:
    std::string name;
    std::string characterClass;
    std::string subclass;
    std::string race;
    std::string subRace;
    std::string background;
    std::map<std::string, int> abilityScores = {
        {"Strength", 8}, {"Dexterity", 8}, {"Constitution", 8},
        {"Intelligence", 8}, {"Wisdom", 8}, {"Charisma", 8}
    };
    int availablePoints = 27;

    DnDCharacter() {
        std::sort(races.begin(), races.end());
        std::sort(classes.begin(), classes.end());
        std::sort(backgrounds.begin(), backgrounds.end());
    }

    void inputCharacterInfo() {
        std::cout << "Enter character name: ";
        std::getline(std::cin, name);

        selectFromList("race", races, race);
        auto foundSubRaces = subRaces.find(race);
        if (foundSubRaces != subRaces.end()) {
            selectFromList("sub-race", foundSubRaces->second, subRace);
        }

        selectFromList("class", classes, characterClass);
        auto foundSubclasses = subclasses.find(characterClass);
        if (foundSubclasses != subclasses.end()) {
            selectFromList("subclass", foundSubclasses->second, subclass);
        }

        selectFromList("background", backgrounds, background);

        inputAbilityScores();
        displayCharacterSheet();
    }

private:
    std::vector<std::string> races = {
        "Dwarf", "Elf", "Halfling", "Human", "Dragonborn",
        "Gnome", "Half-Elf", "Half-Orc", "Tiefling"
    };
    std::map<std::string, std::vector<std::string>> subRaces = {
        {"Dwarf", {"Hill Dwarf", "Mountain Dwarf"}},
        {"Elf", {"High Elf", "Wood Elf", "Dark Elf (Drow)"}},
        {"Halfling", {"Lightfoot Halfling", "Stout Halfling"}},
        {"Gnome", {"Forest Gnome", "Rock Gnome"}},
    };
    std::vector<std::string> classes = {
        "Barbarian", "Bard", "Cleric", "Druid", "Fighter",
        "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer",
        "Warlock", "Wizard"
    };
    std::map<std::string, std::vector<std::string>> subclasses = {
        {"Barbarian", {"Path of the Berserker", "Path of the Totem Warrior"}},
        {"Bard", {"College of Lore", "College of Valor"}},
        {"Cleric", {"Knowledge Domain", "Life Domain", "Light Domain", "Nature Domain", "Tempest Domain", "Trickery Domain", "War Domain"}},
        {"Druid", {"Circle of the Land", "Circle of the Moon"}},
        {"Fighter", {"Battle Master", "Champion", "Eldritch Knight"}},
        {"Monk", {"Way of Four Elements", "Way of the Open Hand", "Way of Shadow"}},
        {"Paladin", {"Oath of the Ancients", "Oath of Devotion", "Oath of Vengeance"}},
        {"Ranger", {"Beast Master", "Hunter"}},
        {"Rogue", {"Arcane Trickster", "Assassin", "Thief"}},
        {"Sorcerer", {"Draconic Bloodline", "Wild Magic"}},
        {"Warlock", {"The Archfey", "The Fiend", "The Great Old One"}},
        {"Wizard", {"School of Abjuration", "School of Conjuration", "School of Divination", "School of Enchantment", "School of Evocation", "School of Illusion", "School of Necromancy", "School of Transmutation"}},
    };
    std::vector<std::string> backgrounds = {
        "Acolyte", "Charlatan", "Criminal", "Entertainer", "Folk Hero",
        "Guild Artisan", "Hermit", "Noble", "Outlander", "Sage",
        "Sailor", "Soldier", "Urchin"
    };

    void selectFromList(const std::string& type, const std::vector<std::string>& options, std::string& selection) {
        std::cout << "Select your character's " << type << ":\n";
        for (size_t i = 0; i < options.size(); ++i) {
            std::cout << i + 1 << ". " << options[i] << "\n";
        }

        int choice = 0;
        while (true) {
            std::cout << "Enter the number of your choice: ";
            if (!(std::cin >> choice)) {
                std::cin.clear(); // Clear error flags
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Discard the incorrect input
                std::cout << "Please enter a valid number.\n";
                continue;
            }
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

            if (choice > 0 && static_cast<size_t>(choice) <= options.size()) {
                selection = options[choice - 1];
                break;
            } else {
                std::cout << "Invalid choice, please select a number from the list.\n";
            }
        }
    }

    void inputAbilityScores() {
        std::cout << "\nYou have " << availablePoints << " points to allocate to your ability scores.\n";
        const std::vector<std::string> order = {"Strength", "Dexterity", "Constitution", "Intelligence", "Wisdom", "Charisma"};
        while (availablePoints > 0) {
            for (const auto& ability : order) {
                std::cout << ability << ": " << abilityScores[ability] << " (Modifier: " << calculateModifier(abilityScores[ability]) << ")\n";
            }
            std::cout << "\nAvailable points: " << availablePoints << ".\nEnter an ability to increase or type 'done' to finish: ";
            std::string choice;
            std::getline(std::cin, choice);
            if (choice == "done") break;
            if (abilityScores.find(choice) == abilityScores.end()) {
                std::cout << "Invalid ability. Please try again.\n";
                continue;
            }
            std::cout << "Points to add to " << choice << " (0 to cancel): ";
            int pointsToAdd;
            std::cin >> pointsToAdd;
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            if (pointsToAdd == 0) continue; // Allows cancellation
            
            int cost = calculateCost(abilityScores[choice], pointsToAdd);
            if (cost <= availablePoints && (abilityScores[choice] + pointsToAdd) <= 15) {
                abilityScores[choice] += pointsToAdd;
                availablePoints -= cost;
                std::cout << choice << " increased to " << abilityScores[choice] << ". Points remaining: " << availablePoints << ".\n";
            } else {
                std::cout << "Not enough points or score limit reached.\n";
            }
        }
    }

    int calculateModifier(int score) const {
        return std::floor((score - 10) / 2.0);
    }

    int calculateCost(int currentScore, int pointsToAdd) {
        int cost = 0;
        for (int i = 0; i < pointsToAdd; ++i) {
            if (currentScore + i >= 14) { // Costs 2 points to increase from 14 to 15
                cost += 2;
            } else {
                cost += 1;
            }
        }
        return cost;
    }

    void displayCharacterSheet() const {
        std::cout << "\n--- Character Sheet ---\n";
        std::cout << "Name: " << name << "\nRace: " << race;
        if (!subRace.empty()) std::cout << " (" << subRace << ")";
        std::cout << "\nClass: " << characterClass;
        if (!subclass.empty()) std::cout << " (" << subclass << ")";
        std::cout << "\nBackground: " << background << "\nAbility Scores:\n";
        for (const std::string& ability : {"Strength", "Dexterity", "Constitution", "Intelligence", "Wisdom", "Charisma"}) {
            std::cout << ability << ": " << abilityScores.at(ability) << " (Modifier: " << calculateModifier(abilityScores.at(ability)) << ")\n";
        }
    }
};

int main() {
    DnDCharacter character;
    character.inputCharacterInfo();
    return 0;
}
